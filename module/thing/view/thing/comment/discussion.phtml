<?php

use thing\entity\Comment;
use Zend\View\Helper\AbstractHelper;

class CommentThread extends AbstractHelper {
	public function __invoke(Comment $comm) {
		return $this->getView()->htmlList(
			$this->toArray($comm),
			false, false, false
		);
	}

	private function render(Comment $comm) {
		return $this->getView()->partial(
			'partial/comment.phtml',
			['comment' => $comm]
		);
	}

	private function toArray(Comment $comm) {
		$tree = [$comm];
		if ($comm->getReplies()->count() > 0) {
			$iter = CommentIterator::iterator($comm);
			$tree[] = [];
			$refs = [&$tree[1]];
			$curr = &$tree[1];
			foreach ($iter as $reply) {
				$depth = $iter->getDepth();
				$max = count($refs);
				if ($depth > $max) {
					$curr[] = [];
					$refs[] = &$curr;
					$curr = &$curr[count($curr) - 1];
				} else if ($depth < $max) {
					$curr = &$refs[$depth];
					array_pop($refs);
				}
				$curr[] = $this->render($reply);
			}
		}
		$tree[0] = $this->render($tree[0]);
		return $tree;
	}
}

class CommentIterator extends \ArrayIterator implements \RecursiveIterator {
	public function __construct(Comment $comm) {
		parent::__construct($comm->getReplies()->toArray());
	}

	public static function iterator(Comment $comm) {
		return new \RecursiveIteratorIterator(new self($comm),
			\RecursiveIteratorIterator::SELF_FIRST
		);
	}

	public function hasChildren() {
		return $this->valid() && $this->current()->getReplies()->count() > 0;
	}

	public function getChildren() {
		return new self($this->current());
	}
}

function thread(Comment $comm, $view) {
	$functor = new CommentThread();
	$functor->setView($view);
	return $functor($comm);
}

?>

<dl><?=$this->partial('partial/link.phtml', ['link' => $this->link])?></dl>
<?=$this->form()->render($this->form)?>
<hr>

<?php foreach ($this->link->getCommentThreads() as $comment):?>
	<?=thread($comment, $this)?>
<?php endforeach?>
